package com.example.demo.Login;

import com.example.demo.Entity.*;
import com.example.demo.Offline.Repository.OnlineGioHangRepository;
import com.example.demo.Offline.Repository.OnlineSanPhamChiTietRepository;
import com.example.demo.Offline.Repository.OnlineSanPhamTrongGioHangRepository;
import com.example.demo.Offline.Repository.YeuThichSanPhamRepository;
import com.example.demo.PhanQuyen.BaseController;
import com.example.demo.Repository.*;
import com.example.demo.Service.EmailService;
import com.example.demo.Service.NguoiDungService;
import com.example.demo.Service.PasswordResetService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.security.Principal;
import java.time.LocalDateTime;
import java.util.*;

@Controller
public class AuthController extends BaseController {

    @Autowired
    private OnlineSanPhamChiTietRepository sanPhamChiTietRepository;
    @Autowired
    private OnlineSanPhamTrongGioHangRepository sanPhamTrongGioHangRepository;

    @Autowired
    private NguoiDungRepository nguoiDungRepository;

    @Autowired
    private JavaMailSenderImpl mailSender;

    @Autowired
    private VaiTroOfflineRepository vaiTroRepository;

    @Autowired
    private XacThucQuenMatKhauRepository tokenRepository;

    private final NguoiDungService nguoiDungService;
    private final PasswordEncoder passwordEncoder;
    private final PasswordResetService passwordResetService;
    private final EmailService emailService;

    @Autowired
    private XacThucEmailRepository xacThucEmailRepository;
    @Autowired
    private YeuThichSanPhamRepository yeuThichSanPhamRepository;

    @Value("${email.service.base-url}")
    private String emailServiceBaseUrl;


    @Autowired
    public AuthController(NguoiDungService nguoiDungService, PasswordEncoder passwordEncoder, PasswordResetService passwordResetService, EmailService emailService) {
        this.nguoiDungService = nguoiDungService;
        this.passwordEncoder = passwordEncoder;
        this.passwordResetService = passwordResetService;
        this.emailService = emailService;
    }


    @GetMapping("/login")
    public String login() {
        return "dangnhap/login";
    }


//    @PreAuthorize("hasAnyAuthority('ADMIN', 'NH√ÇN VI√äN')")
    @GetMapping("/home")
    public String home(Model model, Principal principal) {
        if (principal != null) {
            String username = principal.getName();
            NguoiDung nguoiDung = nguoiDungService.findByTenDangNhap(username);
            model.addAttribute("nguoiDung", nguoiDung);
            model.addAttribute("vaiTros", nguoiDung.getVaiTros());
        }
        //return "menutrangchu/menu";
        return "layout";
    }


///////////////////


    @GetMapping("/login-online")
    public String loginOnline() {
        return "dangnhap/login-online"; // Tr·ªè ƒë·∫øn login-online.html
    }


    @GetMapping("/online-home")
    public String onlineHome(Model model) {
        model.addAttribute("danhSachSanPham", sanPhamChiTietRepository.findByNoiBatTrue());
        return "index";
    }




    /// ƒëƒÉng k√Ω

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("nguoiDung", new NguoiDung());
        return "dangnhap/register";
    }

    // X·ª≠ l√Ω ƒëƒÉng k√Ω
    @PostMapping("/register")
    public String registerUser(@Valid @ModelAttribute("nguoiDung") NguoiDung nguoiDung,
                               BindingResult result,
                               Model model,
                               HttpSession session) {
        if (result.hasErrors()) {
            return "dangnhap/register";
        }

        if (nguoiDungService.isUsernameTaken(nguoiDung.getTenDangNhap())) {
            model.addAttribute("usernameError", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!");
            return "dangnhap/register";
        }

        if (nguoiDungService.isEmailTaken(nguoiDung.getEmail())) {
            model.addAttribute("emailError", "Email ƒë√£ t·ªìn t·∫°i!");
            return "dangnhap/register";
        }

        // üîπ G√°n vai tr√≤ m·∫∑c ƒë·ªãnh "NHAN_VIEN"
        VaiTro vaiTroNhanVien = vaiTroRepository.findByTenVaiTro("NH√ÇN VI√äN");
        if (vaiTroNhanVien == null) {
            throw new RuntimeException("Vai tr√≤ NH√ÇN VI√äN kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
        }
        nguoiDung.getVaiTros().add(vaiTroNhanVien);

        // L∆∞u th√¥ng tin v√†o session
        session.setAttribute("nguoiDungTamThoi", nguoiDung);
        session.setAttribute("emailXacThuc", nguoiDung.getEmail());

        // M√£ x√°c th·ª±c
        String maXacThuc = String.format("%06d", new Random().nextInt(999999));
        XacThucEmail xacThuc = new XacThucEmail();
        xacThuc.setEmail(nguoiDung.getEmail());
        xacThuc.setMaXacThuc(maXacThuc);
        xacThuc.setThoiGianTao(LocalDateTime.now());
        xacThuc.setThoiGianHetHan(LocalDateTime.now().plusMinutes(3));
        xacThuc.setDaXacThuc(false);
        xacThucEmailRepository.save(xacThuc);

        emailService.sendVerificationEmail(nguoiDung.getEmail(), maXacThuc);

        return "redirect:/verify-email";
    }



    // Hi·ªÉn th·ªã form x√°c th·ª±c email
    @GetMapping("/verify-email")
    public String showVerifyEmailForm(HttpSession session, Model model) {
        String email = (String) session.getAttribute("emailXacThuc");
        if (email == null) {
            return "redirect:/register";
        }
        model.addAttribute("email", email);
        return "dangnhap/verify-email";
    }

    // X·ª≠ l√Ω x√°c th·ª±c email
    @PostMapping("/verify-email")
    public String verifyEmail(@RequestParam("maXacThuc") String maXacThuc,
                              HttpSession session,
                              Model model) {
        String email = (String) session.getAttribute("emailXacThuc");

        if (email == null) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y email c·∫ßn x√°c th·ª±c.");
            return "dangnhap/verify-email";
        }

        XacThucEmail xacThuc = xacThucEmailRepository.findTopByEmailOrderByThoiGianTaoDesc(email);
        if (xacThuc == null || xacThuc.getDaXacThuc() || LocalDateTime.now().isAfter(xacThuc.getThoiGianHetHan())) {
            model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
            model.addAttribute("email", email);
            return "dangnhap/verify-email";
        }

        if (!xacThuc.getMaXacThuc().equals(maXacThuc)) {
            model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng.");
            model.addAttribute("email", email);
            return "dangnhap/verify-email";
        }

        // ƒê√°nh d·∫•u x√°c th·ª±c th√†nh c√¥ng
        xacThuc.setDaXacThuc(true);
        xacThucEmailRepository.save(xacThuc);

        // L·∫•y ng∆∞·ªùi d√πng t·ª´ session
        NguoiDung nguoiDung = (NguoiDung) session.getAttribute("nguoiDungTamThoi");
        if (nguoiDung == null || !nguoiDung.getEmail().equals(email)) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
            return "dangnhap/verify-email";
        }

        // M√£ h√≥a m·∫≠t kh·∫©u v√† l∆∞u v√†o DB
        nguoiDung.setMatKhau(passwordEncoder.encode(nguoiDung.getMatKhau()));
        nguoiDung.setTrangThai(true);
        nguoiDungService.save(nguoiDung);

        // X√≥a d·ªØ li·ªáu t·∫°m trong session
        session.removeAttribute("nguoiDungTamThoi");
        session.removeAttribute("emailXacThuc");

        return "redirect:/login?verified";
    }


    @PostMapping("/resend-verification-code")
    public String resendVerificationCode(HttpSession session, Model model) {
        String email = (String) session.getAttribute("emailXacThuc");

        if (email == null) {
            return "redirect:/register";
        }

        // T·∫°o m√£ x√°c th·ª±c m·ªõi
        String newCode = String.format("%06d", new Random().nextInt(999999));

        XacThucEmail newXacThuc = new XacThucEmail();
        newXacThuc.setEmail(email);
        newXacThuc.setMaXacThuc(newCode);
        newXacThuc.setThoiGianTao(LocalDateTime.now());
        newXacThuc.setThoiGianHetHan(LocalDateTime.now().plusMinutes(3));
        newXacThuc.setDaXacThuc(false);

        xacThucEmailRepository.save(newXacThuc);

        // G·ª≠i m√£ qua email
        emailService.sendVerificationEmail(email, newCode);

        model.addAttribute("email", email);
        model.addAttribute("message", "M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.");
        return "dangnhap/verify-email";
    }


//----------------------------------------------------------------------------------------------------------------------





    /// Hi·ªÉn th·ªã form ƒëƒÉng k√Ω online
    @GetMapping("/register-online")
    public String showRegistrationForm1(Model model) {
        model.addAttribute("nguoiDung", new NguoiDung());
        return "dangnhap/register-online"; // ‚úÖ ƒê·ªïi t√™n view cho kh·ªõp URL
    }

    // X·ª≠ l√Ω ƒëƒÉng k√Ω online
    @PostMapping("/register-online")
    public String registerUser1(@Valid @ModelAttribute("nguoiDung") NguoiDung nguoiDung,
                                BindingResult result,
                                Model model,
                                HttpSession session) {
        // Ki·ªÉm tra l·ªói validate
        if (result.hasErrors()) {
            return "dangnhap/register-online";
        }

        // Ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (nguoiDungService.isUsernameTaken(nguoiDung.getTenDangNhap())) {
            model.addAttribute("usernameError", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!");
            return "dangnhap/register-online";
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (nguoiDungService.isEmailTaken(nguoiDung.getEmail())) {
            model.addAttribute("emailError", "Email ƒë√£ t·ªìn t·∫°i!");
            return "dangnhap/register-online";
        }

        // G√°n vai tr√≤ m·∫∑c ƒë·ªãnh l√† "KH√ÅCH H√ÄNG"
        VaiTro vaiTroKhachHang = vaiTroRepository.findByTenVaiTro("KH√ÅCH H√ÄNG");
        if (vaiTroKhachHang == null) {
            throw new RuntimeException("Vai tr√≤ KH√ÅCH H√ÄNG kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
        }
        nguoiDung.getVaiTros().add(vaiTroKhachHang);

        // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng t·∫°m th·ªùi v√†o session
        session.setAttribute("nguoiDungTamThoi", nguoiDung);
        session.setAttribute("emailXacThuc", nguoiDung.getEmail());

        // T·∫°o m√£ x√°c th·ª±c ng·∫´u nhi√™n 6 ch·ªØ s·ªë
        String maXacThuc = String.format("%06d", new Random().nextInt(999999));

        // T·∫°o ƒë·ªëi t∆∞·ª£ng x√°c th·ª±c email
        XacThucEmail xacThuc = new XacThucEmail();
        xacThuc.setEmail(nguoiDung.getEmail());
        xacThuc.setMaXacThuc(maXacThuc);
        xacThuc.setThoiGianTao(LocalDateTime.now());
        xacThuc.setThoiGianHetHan(LocalDateTime.now().plusMinutes(3));
        xacThuc.setDaXacThuc(false);

        // L∆∞u m√£ x√°c th·ª±c v√†o CSDL
        xacThucEmailRepository.save(xacThuc);

        // G·ª≠i m√£ x√°c th·ª±c qua email
        emailService.sendVerificationEmail(nguoiDung.getEmail(), maXacThuc);

        // Chuy·ªÉn h∆∞·ªõng sang trang x√°c th·ª±c email
        return "redirect:/verify-email-online";
    }


    // Hi·ªÉn th·ªã form x√°c th·ª±c email online
    @GetMapping("/verify-email-online")
    public String showVerifyEmailForm1(HttpSession session, Model model) {
        String email = (String) session.getAttribute("emailXacThuc");
        if (email == null) {
            return "redirect:/register-online"; // ‚úÖ Redirect ƒë√∫ng n·∫øu ch∆∞a c√≥ email
        }
        model.addAttribute("email", email);
        return "dangnhap/verify-email-online"; // ‚úÖ View m·ªõi
    }

    // X·ª≠ l√Ω x√°c th·ª±c email online
    @PostMapping("/verify-email-online")
    public String verifyEmail1(@RequestParam("maXacThuc") String maXacThuc,
                              HttpSession session,
                              Model model) {
        String email = (String) session.getAttribute("emailXacThuc");

        if (email == null) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y email c·∫ßn x√°c th·ª±c.");
            return "dangnhap/verify-email-online";
        }

        XacThucEmail xacThuc = xacThucEmailRepository.findTopByEmailOrderByThoiGianTaoDesc(email);
        if (xacThuc == null || xacThuc.getDaXacThuc() || LocalDateTime.now().isAfter(xacThuc.getThoiGianHetHan())) {
            model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
            model.addAttribute("email", email);
            return "dangnhap/verify-email-online";
        }

        if (!xacThuc.getMaXacThuc().equals(maXacThuc)) {
            model.addAttribute("error", "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng.");
            model.addAttribute("email", email);
            return "dangnhap/verify-email-online";
        }

        // ƒê√°nh d·∫•u x√°c th·ª±c th√†nh c√¥ng
        xacThuc.setDaXacThuc(true);
        xacThucEmailRepository.save(xacThuc);

        // L·∫•y ng∆∞·ªùi d√πng t·ª´ session
        NguoiDung nguoiDung = (NguoiDung) session.getAttribute("nguoiDungTamThoi");
        if (nguoiDung == null || !nguoiDung.getEmail().equals(email)) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
            return "dangnhap/verify-email-online";
        }

        // M√£ h√≥a m·∫≠t kh·∫©u v√† l∆∞u v√†o DB
        nguoiDung.setMatKhau(passwordEncoder.encode(nguoiDung.getMatKhau()));
        nguoiDung.setTrangThai(true);
        nguoiDungService.save(nguoiDung);

        // X√≥a d·ªØ li·ªáu t·∫°m trong session
        session.removeAttribute("nguoiDungTamThoi");
        session.removeAttribute("emailXacThuc");

        return "redirect:/login-online?verified"; // ‚úÖ Gi·ªØ nguy√™n
    }


    @PostMapping("/resend-verification-code-online")
    public String resendVerificationCode1(HttpSession session, Model model) {
        String email = (String) session.getAttribute("emailXacThuc");

        if (email == null) {
            return "redirect:/register-online"; // ‚úÖ S·ª≠a l·∫°i redirect ph√π h·ª£p
        }

        // T·∫°o m√£ x√°c th·ª±c m·ªõi
        String newCode = String.format("%06d", new Random().nextInt(999999));

        XacThucEmail newXacThuc = new XacThucEmail();
        newXacThuc.setEmail(email);
        newXacThuc.setMaXacThuc(newCode);
        newXacThuc.setThoiGianTao(LocalDateTime.now());
        newXacThuc.setThoiGianHetHan(LocalDateTime.now().plusMinutes(3));
        newXacThuc.setDaXacThuc(false);

        xacThucEmailRepository.save(newXacThuc);

        // G·ª≠i m√£ qua email
        emailService.sendVerificationEmail(email, newCode);

        model.addAttribute("email", email);
        model.addAttribute("message", "M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.");
        return "dangnhap/verify-email-online"; // ‚úÖ ƒê·ªïi view ph√π h·ª£p v·ªõi online
    }








//----------------------------------------------------------------------------------------------------------------------

    ///// ƒë·ªïi m·∫≠t kh·∫©u

    @GetMapping("/change-password")
    public String showChangePasswordPage() {
        return "dangnhap/change-password";
    }

    @PostMapping("/change-password")
    public String changePassword(
            @RequestParam("currentPassword") String currentPassword,
            @RequestParam("newPassword") String newPassword,
            @RequestParam("confirmPassword") String confirmPassword,
            Authentication authentication,
            Model model
    ) {
        String username = authentication.getName();
        NguoiDung nguoiDung = nguoiDungService.findByTenDangNhap(username);

        if (!passwordEncoder.matches(currentPassword, nguoiDung.getMatKhau())) {
            model.addAttribute("error", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c!");
            return "dangnhap/change-password";
        }

        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
            return "dangnhap/change-password";
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        nguoiDung.setMatKhau(passwordEncoder.encode(newPassword));
        nguoiDungService.save(nguoiDung);

        model.addAttribute("success", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        return "dangnhap/change-password";
    }


    ///// qu√™n m·∫≠t kh·∫©u


    @GetMapping("/quen-mat-khau")
    public String hienFormQuenMatKhau() {
        return "dangnhap/quen-mat-khau";
    }

    @PostMapping("/quen-mat-khau")
    public String xuLyQuenMatKhau(@RequestParam("email") String email, Model model, HttpSession session) {
        Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findByEmail(email);
        if (nguoiDungOpt.isEmpty()) {
            model.addAttribute("error", "Email kh√¥ng t·ªìn t·∫°i.");
            return "dangnhap/quen-mat-khau";
        }

        NguoiDung nguoiDung = nguoiDungOpt.get();
        String token = UUID.randomUUID().toString();

        XacThucQuenMatKhau xacThuc = XacThucQuenMatKhau.builder()
                .nguoiDung(nguoiDung)
                .maToken(token)
                .thoiGianHetHan(LocalDateTime.now().plusMinutes(30))
                .daSuDung(false)
                .build();
        tokenRepository.save(xacThuc);

        // L∆∞u token v√†o session
        session.setAttribute("tokenDatLaiMatKhau", token);

        // G·ª≠i link kh√¥ng ch·ª©a token
        String link = "http://localhost:9999/dat-lai-mat-khau";
        String content = "Nh·∫•n v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:\n" + link;

        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(email);
        message.setSubject("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
        message.setText(content);
        mailSender.send(message);

        model.addAttribute("message", "ƒê√£ g·ª≠i h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·ªõi email.");
        return "dangnhap/quen-mat-khau";
    }

    @GetMapping("/dat-lai-mat-khau")
    public String hienFormDatLaiMatKhau(HttpSession session, Model model) {
        String token = (String) session.getAttribute("tokenDatLaiMatKhau");

        if (token == null) {
            model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y token.");
            return "dangnhap/dat-lai-mat-khau";
        }

        Optional<XacThucQuenMatKhau> xacThucOpt = tokenRepository.findByMaToken(token);

        if (xacThucOpt.isEmpty()) {
            model.addAttribute("error", "Token kh√¥ng h·ª£p l·ªá.");
            return "dangnhap/dat-lai-mat-khau";
        }

        XacThucQuenMatKhau xacThuc = xacThucOpt.get();

        // N·∫øu token h·∫øt h·∫°n
        if (xacThuc.getThoiGianHetHan().isBefore(LocalDateTime.now())) {
            // X√≥a token c≈©
            tokenRepository.delete(xacThuc);

            // Sinh token m·ªõi
            String tokenMoi = UUID.randomUUID().toString();

            XacThucQuenMatKhau tokenMoiEntity = XacThucQuenMatKhau.builder()
                    .nguoiDung(xacThuc.getNguoiDung())
                    .maToken(tokenMoi)
                    .thoiGianHetHan(LocalDateTime.now().plusMinutes(30))
                    .daSuDung(false)
                    .build();

            tokenRepository.save(tokenMoiEntity);

            // C·∫≠p nh·∫≠t token trong session
            session.setAttribute("tokenDatLaiMatKhau", tokenMoi);

            // G·ª≠i l·∫°i email
            String link = "http://localhost:9999/dat-lai-mat-khau";
            String content = "Token c≈© ƒë√£ h·∫øt h·∫°n. ƒê√¢y l√† link m·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:\n" + link;

            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(xacThuc.getNguoiDung().getEmail());
            message.setSubject("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Token m·ªõi");
            message.setText(content);
            mailSender.send(message);

            model.addAttribute("message", "Token ƒë√£ h·∫øt h·∫°n. H·ªá th·ªëng ƒë√£ g·ª≠i l·∫°i link m·ªõi t·ªõi email.");
            return "dangnhap/quen-mat-khau";
        }

        // N·∫øu token c√≤n hi·ªáu l·ª±c, cho ph√©p ƒë·ªïi m·∫≠t kh·∫©u
        return "dangnhap/dat-lai-mat-khau";
    }


    @PostMapping("/dat-lai-mat-khau")
    public String xuLyDatLaiMatKhau(@RequestParam("matKhauMoi") String matKhauMoi,
                                    HttpSession session,
                                    Model model) {
        String token = (String) session.getAttribute("tokenDatLaiMatKhau");

        if (token == null) {
            model.addAttribute("error", "Token kh√¥ng h·ª£p l·ªá.");
            return "dangnhap/dat-lai-mat-khau";
        }

        Optional<XacThucQuenMatKhau> xacThucOpt = tokenRepository.findByMaToken(token);
        if (xacThucOpt.isEmpty()) {
            model.addAttribute("error", "Token kh√¥ng h·ª£p l·ªá.");
            return "dangnhap/dat-lai-mat-khau";
        }

        XacThucQuenMatKhau xacThuc = xacThucOpt.get();
        if (xacThuc.getDaSuDung() || xacThuc.getThoiGianHetHan().isBefore(LocalDateTime.now())) {
            model.addAttribute("error", "Token ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
            return "dangnhap/dat-lai-mat-khau";
        }

        NguoiDung nguoiDung = xacThuc.getNguoiDung();
        nguoiDung.setMatKhau(passwordEncoder.encode(matKhauMoi));
        nguoiDungRepository.save(nguoiDung);

        xacThuc.setDaSuDung(true);
        tokenRepository.save(xacThuc);

        // X√≥a token kh·ªèi session sau khi d√πng xong
        session.removeAttribute("tokenDatLaiMatKhau");

        model.addAttribute("message", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng.");
        return "dangnhap/login";
    }




}